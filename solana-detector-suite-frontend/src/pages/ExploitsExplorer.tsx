
import { useState, useEffect } from "react";
import PageLayout from "@/components/layout/PageLayout";
import ExploitCard from "@/components/exploits/ExploitCard";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Input } from "@/components/ui/input";
import { Search } from "lucide-react";
import { Button } from "@/components/ui/button";

// Mock data for exploits
const allExploits = [
  {
    id: "ex1",
    title: "Mangolana DEX Exploit",
    date: "May 5, 2025",
    protocol: "Mangolana",
    amount: "$2.8M",
    description: "Precision error in AMM calculations allowed attackers to execute a flash loan attack.",
    category: "Flash loan",
    severity: "high" as const,
    recovered: "0%",
  },
  {
    id: "ex2",
    title: "SolStake Bridge Hack",
    date: "May 3, 2025",
    protocol: "SolStake",
    amount: "$12.4M",
    description: "Cross-chain bridge vulnerability exploited, allowing attackers to forge withdrawal proofs.",
    category: "Bridge security",
    severity: "critical" as const,
    recovered: "15%",
  },
  {
    id: "ex3",
    title: "LunaSol Lending Protocol",
    date: "Apr 29, 2025",
    protocol: "LunaSol",
    amount: "$850K",
    description: "Price oracle manipulation led to undercollateralized loans being issued.",
    category: "Oracle manipulation",
    severity: "medium" as const,
    recovered: "70%",
  },
  {
    id: "ex4",
    title: "SolRacer NFT Exploit",
    date: "Apr 25, 2025",
    protocol: "SolRacer",
    amount: "$380K",
    description: "Minting function vulnerability allowed creation of unlimited NFTs at minimal cost.",
    category: "Access control",
    severity: "medium" as const,
    recovered: "0%",
  },
  {
    id: "ex5",
    title: "MoonLend Reentrancy Attack",
    date: "Apr 20, 2025",
    protocol: "MoonLend",
    amount: "$5.2M",
    description: "Classic reentrancy vulnerability in lending protocol allowed multiple withdrawals before state updates.",
    category: "Reentrancy",
    severity: "critical" as const,
    recovered: "92%",
  },
  {
    id: "ex6",
    title: "SolarBeam DEX Price Manipulation",
    date: "Apr 15, 2025",
    protocol: "SolarBeam",
    amount: "$1.7M",
    description: "Temporary price manipulation through flash loans to extract value from liquidity pools.",
    category: "Price manipulation",
    severity: "high" as const,
    recovered: "0%",
  },
  {
    id: "ex7",
    title: "StarDust Multisig Failure",
    date: "Apr 10, 2025",
    protocol: "StarDust",
    amount: "$920K",
    description: "Implementation error in multisig wallet allowed single signer to authorize transactions.",
    category: "Access control",
    severity: "high" as const,
    recovered: "100%",
  },
  {
    id: "ex8",
    title: "Luna Bridge Attack",
    date: "Apr 5, 2025",
    protocol: "Luna Bridge",
    amount: "$7.3M",
    description: "Cross-chain bridge attack exploiting validator consensus mechanism.",
    category: "Bridge security",
    severity: "critical" as const,
    recovered: "45%",
  },
];

export default function ExploitsExplorer() {
  const [activeTab, setActiveTab] = useState<string>("recent");
  const [searchQuery, setSearchQuery] = useState<string>("");
  const [filteredExploits, setFilteredExploits] = useState(allExploits);

  // Filter and sort exploits based on active tab and search query
  useEffect(() => {
    let result = [...allExploits];
    
    // Filter by search query if provided
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      result = result.filter(
        exploit => 
          exploit.title.toLowerCase().includes(query) || 
          exploit.protocol.toLowerCase().includes(query) || 
          exploit.category.toLowerCase().includes(query) ||
          exploit.description.toLowerCase().includes(query)
      );
    }
    
    // Sort or filter based on active tab
    switch(activeTab) {
      case "severe":
        // Sort by severity (critical > high > medium > low)
        result.sort((a, b) => {
          const severityOrder = { critical: 3, high: 2, medium: 1, low: 0 };
          return severityOrder[b.severity as keyof typeof severityOrder] - 
                 severityOrder[a.severity as keyof typeof severityOrder];
        });
        break;
      case "recovered":
        // Filter to only show exploits with recovery > 0%
        result = result.filter(exploit => {
          const recoveredPercent = parseInt(exploit.recovered);
          return !isNaN(recoveredPercent) && recoveredPercent > 0;
        });
        break;
      case "recent":
      default:
        // Sort by date (most recent first) - already in that order in our mock data
        break;
    }
    
    setFilteredExploits(result);
  }, [activeTab, searchQuery]);

  return (
    <PageLayout title="Exploits Explorer">
      <div className="mb-8 flex flex-col gap-6">
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
          <h1 className="text-2xl font-bold">Exploits Explorer</h1>
          
          <div className="relative w-full md:w-64">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground" size={18} />
            <Input 
              placeholder="Search exploits..." 
              className="pl-10 bg-card border-border focus-visible:ring-purple"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </div>
        </div>

        <Tabs defaultValue="recent" value={activeTab} onValueChange={setActiveTab}>
          <TabsList>
            <TabsTrigger value="recent">Recent Exploits</TabsTrigger>
            <TabsTrigger value="severe">Most Severe</TabsTrigger>
            <TabsTrigger value="recovered">Funds Recovered</TabsTrigger>
          </TabsList>
          
          <TabsContent value="recent" className="mt-4">
            {filteredExploits.length > 0 ? (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {filteredExploits.map((exploit) => (
                  <ExploitCard key={exploit.id} {...exploit} />
                ))}
              </div>
            ) : (
              <div className="text-center py-12 text-muted-foreground">
                No exploits found matching your search criteria.
              </div>
            )}
          </TabsContent>
          
          <TabsContent value="severe" className="mt-4">
            {filteredExploits.length > 0 ? (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {filteredExploits.map((exploit) => (
                  <ExploitCard key={exploit.id} {...exploit} />
                ))}
              </div>
            ) : (
              <div className="text-center py-12 text-muted-foreground">
                No severe exploits found matching your search criteria.
              </div>
            )}
          </TabsContent>
          
          <TabsContent value="recovered" className="mt-4">
            {filteredExploits.length > 0 ? (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {filteredExploits.map((exploit) => (
                  <ExploitCard key={exploit.id} {...exploit} />
                ))}
              </div>
            ) : (
              <div className="text-center py-12 text-muted-foreground">
                No exploits with recovered funds found.
              </div>
            )}
          </TabsContent>
        </Tabs>
      </div>
    </PageLayout>
  );
}
